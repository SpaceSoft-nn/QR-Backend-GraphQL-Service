extend type Mutation {
    "Создание пользователя cassier/manager"
    userCreate(input: UserCreateInput! @spread): User! @field(resolver: "App\\Modules\\User\\Presentation\\HTTP\\Graphql\\Response\\UserResolver@store") @guard
    updateUser(input: UpdateUserInput! @spread): User! @field(resolver: "App\\Modules\\User\\Presentation\\HTTP\\Graphql\\Response\\UserResolver@update") @guard

}



input UpdateUserInput @validator(class: "App\\Modules\\User\\Domain\\Validators\\СhangeRoleUserValidation") {

    user_id: String!

    role: UserRoleEnum

    active: Boolean

}

input UserCreateInput  {

    "В запросе должен быть обязательно либо email, либо phone"
    email: String!

    "В запросе должен быть обязательно либо email, либо phone"
    phone: String

    "Обязательный параметр пароля"
    password: String!

    "Повтор пароля"
    password_confirmation: String!

    "manager/cassier"
    role: UserRoleEnum!

    "Имя"
    first_name: String!

    "Фамилия"
    last_name: String!

    "Отчество"
    father_name: String!

    "ID личного кабинета пользователя авторизированного через токен - в который будет добавляться user"
    personalarea_id: ID!

    "ID организации, куда будет добавлен пользователь"
    organization_id: ID!

}


type User @model(class: "App\\Modules\\User\\Domain\\Models\\User") {

    id: ID!

    first_name: String

    last_name: String

    father_name: String

    role: UserRoleEnum!

    "Права user, возможно фронту это не надо"
    permission: Int!

    "Активирован ли user"
    active: Boolean!

    "Прошёл ли user нотификацию"
    auth: Boolean!

    "Вернуть все организации к которым принадлежит пользователь"
    organizations: [Organization] @belongsToMany

    "Вернуть все личные кабинеты к которым принадлежит пользователь"
    personalAreas: [PersonalArea!]! @belongsToMany

    "Вернуть все личные кабинеты к которым принадлежит пользователь"
    workspaces: [Workspace]! @belongsToMany

    # Возвращает личный кабинет, где пользователь является создателям кабинета (Админом)
    # personal_area_admin: PersonalArea! @hasOne(model: "App\\Models\\Author")

    "Таблица на email_list где указано значение email и статус нотификации"
    emailList: EmailList @belongsToMany

    "Таблица на email_list где указано значение phone и статус нотификации"
    phoneList: PhoneList @belongsToMany

    "Значение email"
    email: String @field(resolver: "App\\Modules\\User\\Presentation\\HTTP\\Graphql\\Field\\UserFieldResolver@email")

    "Значение phone"
    phone: String @field(resolver: "App\\Modules\\User\\Presentation\\HTTP\\Graphql\\Field\\UserFieldResolver@phone")

    created_at: Date!

    updated_at: Date!

}

enum UserRoleEnum {
    ADMIN
    MANAGER,
    CASSIER,
}




