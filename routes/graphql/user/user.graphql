
extend type Query {
    userMe(id: ID! @whereKey): User @find
}

type User @model(class: "App\\Modules\\User\\Domain\\Models\\User") {

    id: ID!

    first_name: String

    last_name: String

    father_name: String

    role: UserRoleEnum!

    permission: Int!

    active: Boolean!

    auth: Boolean!

    organizations: [Organization] @belongsToMany

    personal_areas: PersonalArea! @belongsToMany

    # Возвращает личный кабинет, где пользователь является создателям кабинета (Админом)
    # personal_area_admin: PersonalArea! @hasOne(model: "App\\Models\\Author")

    "Таблица на email_list где указано значение email и статус нотификации"
    email_list: EmailList @belongsToMany

    "Таблица на email_list где указано значение phone и статус нотификации"
    phone_list: PhoneList @belongsToMany

    "Значение email"
    email: String @field(resolver: "App\\Modules\\User\\Presentation\\HTTP\\Graphql\\Field\\UserFieldResolver@email")

    "Значение phone"
    phone: String @field(resolver: "App\\Modules\\User\\Presentation\\HTTP\\Graphql\\Field\\UserFieldResolver@phone")

    created_at: Date!

    updated_at: Date!

}

enum UserRoleEnum {
    admin,
    manager,
    cassier,
}


