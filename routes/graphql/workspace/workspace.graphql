extend type Mutation {

    "Создание организации по авторизированному пользователю"
    createWorkspace(input: WorkspaceCreate! @spread): Workspace! @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Response\\WorkspaceResolver@store") @guard

}

extend type Query {

    workspaces: [Workspace]! @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Response\\WorkspaceResolver@index") @guard
    workspace(id: ID! @whereKey): Workspace @find @guard

}

input WorkspaceCreate @validator(class: "App\\Modules\\Workspace\\Domain\\Validators\\CreateWorkspaceValidator") {

    organization_id: String!

    name: String!

    description: String

    is_active: Boolean

    payment_id: String

}


type Workspace @model(class: "App\\Modules\\Workspace\\Domain\\Models\\Workspace") {

    id: ID!

    organization: Organization! @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Field\\WorkspaceFieldResolver@organization")

    name: String!

    is_active: Boolean!

    description: String

    "Пользователь который работает в данный момент под workspace"
    user_worker: User @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Field\\WorkspaceFieldResolver@user_worker")

    user_owner: User! @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Field\\WorkspaceFieldResolver@user_owner")

    payment: Payment @belongsTo

    created_at: Date!

    updated_at: Date!

}


