extend type Mutation {

    "Создание рабочего места по авторизированному пользователю"
    createWorkspace(input: WorkspaceCreateInput! @spread): Workspace! @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Response\\WorkspaceResolver@store") @guard

    "Добавление Пользователя к workspace"
    addUserWorkspace(input: AddUserWorkspaceInput! @spread): User! @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Response\\WorkspaceResolver@addUserWorkspace") @guard

    "Добавление Payment к workspace"
    addPaymentWorkspace(input: AddPaymentWorkspaceInput): Workspace! @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Response\\WorkspaceResolver@addPaymentWorkspace") @guard

    "Удаляем пользователя из workspace"
    deleteUserWorkspace(input: DeleteUserWorkspaceInput! @spread): DeleteUserResponse! @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Response\\WorkspaceResolver@deleteUserWorkspace") @guard

    "Указание user в работу (устаналиваем кто будет работать за workspace)"
    setWorkUserWorkspace(input: SetWorkUserWorkspaceInput! @spread): User! @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Response\\WorkspaceResolver@setWorkUserWorkspace") @guard

}

extend type Query {

    "Вернуть все workspaces"
    workspaces(page: Int, count: Int): WorkspacePaginator! @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Response\\WorkspaceResolver@index") @guard

    "Вернуть workspace по id"
    workspace(id: ID! @whereKey): Workspace @find @guard

}

type WorkspacePaginator {
    data: [Workspace]!
    paginatorInfo: PaginatorInfo!
}

input AddPaymentWorkspaceInput {

    payment_method_id: ID! @rules(apply: ["exists:payment_methods,id"])

    workspace_id: ID! @rules(apply: ["exists:workspaces,id"])

}

input WorkspaceCreateInput @validator(class: "App\\Modules\\Workspace\\Domain\\Validators\\CreateWorkspaceValidator") {

    organization_id: String!

    name: String!

    description: String

    is_active: Boolean

    "Драйвер оплаты: Тинькофф, Сберабанк, Точка"
    payment_method_id: String

}

input AddUserWorkspaceInput @validator(class: "App\\Modules\\Workspace\\Domain\\Validators\\AddUserWorkspaceValidator") {

    "пользователь который добавляется к workspace"
    user_id: String!

    "worksapce к которому добавляется пользователь"
    workspace_id: String!

}

input SetWorkUserWorkspaceInput @validator(class: "App\\Modules\\Workspace\\Domain\\Validators\\SetWorkUserWorkspaceValidator") {

    "пользователь который добавляется к workspace"
    user_id: String!

    "worksapce к которому добавляется пользователь"
    workspace_id: String!

}

input DeleteUserWorkspaceInput @validator(class: "App\\Modules\\Workspace\\Domain\\Validators\\DeleteUserWorkspaceValidator") {

    "пользователь который добавляется к workspace"
    user_id: String!

    "worksapce к которому добавляется пользователь"
    workspace_id: String!

}


type DeleteUserResponse {

    "uuid удаленного user"
    user_id: String!

    "статус удаления"
    status: Boolean!

}

type Workspace @model(class: "App\\Modules\\Workspace\\Domain\\Models\\Workspace") {

    id: ID!

    organization: Organization! @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Field\\WorkspaceFieldResolver@organization")

    name: String!

    is_active: Boolean!

    description: String

    transactions: [Transaction]! @hasMany

    "Пользователь который работает в данный момент под workspace"
    user_worker: User @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Field\\WorkspaceFieldResolver@user_worker")

    user_owner: User! @field(resolver: "App\\Modules\\Workspace\\Presentation\\HTTP\\Graphql\\Field\\WorkspaceFieldResolver@user_owner")

    paymentMethod: PaymentMethod @belongsTo

    created_at: Date!

    updated_at: Date!

}


