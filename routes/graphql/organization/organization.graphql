extend type Query {

    organizations: [Organization]! @field(resolver: "App\\Modules\\Organization\\Presentation\\HTTP\\Graphql\\Response\\OrganizationResolver@index") @guard
    organization(id: ID! @whereKey): Organization @find @guard

}

extend type Mutation {

    "Создание организации по авторизированному пользователю"
    createOrganization(input: OrganizationCreate! @spread): Organization! @field(resolver: "App\\Modules\\Organization\\Presentation\\HTTP\\Graphql\\Response\\OrganizationResolver@store") @guard

}


input OrganizationCreate {

    name: String!

    address: String!

    phone: String

    email: String

    website: String

    type: OrganizationTypeEnum!

    description: String

    "Вид экономической деятельности"
    okved: String

    founded_date: String

    "Инн"
    inn: String!

    "КПП - Только у организации"
    kpp: String

    "ОГРН и ОГРНИП"
    registration_number: String!

}

type Organization @model(class: "App\\Modules\\Organization\\Domain\\Models\\Organization") {

    id: ID!

    name: String!

    address: String!

    phone: String

    email: String

    "Статус Закрыт/Открыт"
    remuved: String!

    website: String

    "Тип оргиназции: ООО, ИП и т.д"
    type: OrganizationTypeEnum!

    description: String

    "Вид экономической деятельности"
    okved: String

    "Дата основания компании"
    founded_date: String

    "Инн у ООО/ИП"
    inn: String!

    "КПП - Только у организации"
    kpp: String

    "ОГРН и ОГРНИП"
    registration_number: String!

    "Основатель компании User"
    owner: User! @belongsTo

    "Все user принадлежащей компании"
    users: [User!]! @belongsToMany

    created_at: Date!

    updated_at: Date!

}

enum OrganizationTypeEnum {
    legal,
    individual,
}


