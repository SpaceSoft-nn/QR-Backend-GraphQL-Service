extend type Mutation {

    "Создание организации по авторизированному пользователю"
    createTransaction(input: CreateTransactionInput! @spread): Transaction! @field(resolver: "App\\Modules\\Transaction\\Presentation\\HTTP\\Graphql\\Response\\TransactionResolver@store") @guard

}

input CreateTransactionInput @validator(class: "App\\Modules\\Transaction\\Domain\\Validators\\CreateTransactionValidator"){

    workspace_id: ID!

    "Сумма для оплаты"
    amount: String!

    "Тип продукта, услуга/товар и т.д... "
    type_product: String

    "Количество товара"
    count_product: String

    "Название продукта"
    name_product: String

}


type Transaction @model(class: "App\\Modules\\Transaction\\Domain\\Models\\Transaction") {

    id: ID!

    number_uuid: String!

    status: TransactionStatusEnum!

    amount: String! @field(resolver: "App\\Modules\\Transaction\\Presentation\\HTTP\\Graphql\\Field\\TransactionFieldResolver@amount")

    workspace: Workspace! @belongsTo

    qr_code: QrCode! @belongsTo(relation: "qrCode")

    type_product: String

    count_product: String

    name_product: String

    created_at: Date!

    updated_at: Date!

}

enum TransactionStatusEnum {
    pending,
    waiting_for_capture,
    completed,
    cancelled,
}
